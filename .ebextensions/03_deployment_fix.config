# デプロイメント時ヘルスチェック失敗の解決
option_settings:
  # ヘルスチェック設定（正しいオプションのみ使用）
  aws:elasticbeanstalk:healthreporting:system:
    SystemType: enhanced
    EnhancedHealthAuthEnabled: true
    
  # アプリケーションヘルスチェック設定（正しいnamespace使用）
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: /
    
  # デプロイメント設定
  aws:autoscaling:updatepolicy:rollingupdate:
    RollingUpdateEnabled: true
    RollingUpdateType: Health
    MaxBatchSize: 1                       # 一度に1つのインスタンスのみ更新
    MinInstancesInService: 1              # 最低1つのインスタンスを維持
    Timeout: PT45M                        # タイムアウトを45分に延長
    PauseTime: PT10M                      # インスタンス間で10分待機
    
  # プロセス管理
  aws:elasticbeanstalk:container:python:
    WSGIPath: application.py
    NumProcesses: 1                       # プロセス数を制限してメモリ使用量を抑制
    NumThreads: 15                        # スレッド数も調整

# 起動前の準備コマンド
container_commands:
  01_create_health_endpoint:
    command: |
      # ヘルスチェック用の軽量エンドポイントを準備
      echo "Health check preparation starting..."
      
  02_wait_for_dependencies:
    command: |
      # 依存関係のインストール完了を待機
      sleep 30
      echo "Dependencies check completed"
      
  03_verify_application_structure:
    command: |
      # アプリケーション構造の確認
      ls -la /var/app/current/ || echo "Current app directory not found"
      ls -la /var/app/current/modules/ || echo "Modules directory not found"
      echo "Application structure verification completed"

# デプロイメント後のヘルスチェック
files:
  "/opt/elasticbeanstalk/hooks/appdeploy/post/99_verify_health.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      echo "=== Post-deployment health verification ==="
      
      # アプリケーション起動を十分に待機
      sleep 60
      
      # プロセス確認
      if pgrep -f "application.py" > /dev/null; then
        echo "✅ Application process is running"
      else
        echo "❌ Application process not found"
        ps aux | grep python | head -10
      fi
      
      # ポート確認
      if netstat -tlnp | grep ":8000" > /dev/null; then
        echo "✅ Application is listening on port 8000"
      else
        echo "❌ Application not listening on port 8000"
        netstat -tlnp | grep ":8000" || echo "Port 8000 not found"
      fi
      
      # HTTP応答確認
      for i in {1..12}; do  # 最大2分間試行
        if curl -f -s -o /dev/null http://localhost:8000/; then
          echo "✅ Application HTTP response OK"
          break
        else
          echo "⏳ Waiting for HTTP response... ($i/12)"
          sleep 10
        fi
      done
      
      echo "=== Health verification completed ===" 